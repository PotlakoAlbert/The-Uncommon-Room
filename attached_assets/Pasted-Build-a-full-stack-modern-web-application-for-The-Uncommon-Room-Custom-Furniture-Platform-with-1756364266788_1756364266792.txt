Build a full-stack modern web application for **The Uncommon Room - Custom Furniture Platform** with the following specifications:

---

## üåê General
- The project must have two folders in the root: frontend and backend.
- The app is for a **South African custom furniture business** specializing in bespoke, handcrafted furniture.
- **Two user types**: Customers (register, browse products, manage cart, place orders) and Admin (manage products, orders, inventory).
- Focus on mobile-first design with **6 core use cases**: Browse Products, Add to Cart, Place Order, View My Orders, Send Inquiry, Custom Design.

---

## üì¶ Backend
- Use **Express.js** with **Swagger** documentation for all API endpoints.
- **Fully JavaScript** - no TypeScript in backend.
- Use **Sequelize ORM** with **PostgreSQL** database.
  - Include migrations and seeders for all tables.
  - DB credentials must be stored in .env.
- Use **Cloudinary** for storing product images and custom design reference photos.
- Email notifications using **Nodemailer** for order confirmations and updates.

---

### üéØ Database Design (Based on Your ERD)

**Customer**
- customerId: integer (PK, auto-increment)
- name: string
- phone: string
- address: text
- email: string (unique)
- passwordHash: string
- createdAt, updatedAt

**Product**
- prodId: integer (PK, auto-increment)
- name: string
- description: text
- price: decimal
- category: enum("headboards", "tables", "seating", "storage", "custom")
- active: boolean
- mainImage: string
- galleryImages: JSON array
- material: string
- dimensions: string
- createdAt, updatedAt

**Admin**
- adminId: integer (PK, auto-increment)
- name: string
- phone: string
- address: string
- email: string (unique)
- passwordHash: string
- createdAt, updatedAt

**ShoppingCart**
- cartId: integer (PK, auto-increment)
- customerId: integer (FK to Customer)
- createdAt: datetime

**CartItem**
- cartItemId: integer (PK, auto-increment)
- cartId: integer (FK to ShoppingCart)
- prodId: integer (FK to Product)
- quantity: integer
- customNotes: text

**Order**
- ordId: integer (PK, auto-increment)
- customerId: integer (FK to Customer)
- orderDate: datetime
- status: enum("pending", "confirmed", "in_production", "ready", "delivered", "cancelled")
- totalAmount: decimal
- shippingAddress: text
- paymentMethod: enum("cash", "eft", "card")
- paymentStatus: enum("pending", "paid", "refunded")
- createdAt, updatedAt

**OrderItem**
- orderItemId: integer (PK, auto-increment)
- ordId: integer (FK to Order)
- prodId: integer (FK to Product)
- unitPrice: decimal
- quantity: integer

**Delivery**
- delvId: integer (PK, auto-increment)
- ordId: integer (FK to Order)
- dispatchedDate: date
- expectedDate: date
- deliveredDate: date
- status: enum("pending", "dispatched", "in_transit", "delivered", "failed")
- address: text

**Inventory**
- stockId: integer (PK, auto-increment)
- prodId: integer (FK to Product)
- quantity: integer
- costPrice: decimal
- lastUpdated: datetime

**Supplier**
- suppId: integer (PK, auto-increment)
- name: string
- contact: string
- address: text

**Inquiries** (Additional for use cases)
- inquiryId: integer (PK, auto-increment)
- name: string
- email: string
- subject: string
- message: text
- prodId: integer (FK to Product, nullable)
- inquiryType: enum("general", "product", "custom_design", "quote")
- status: enum("new", "responded", "closed")
- createdAt, updatedAt

**CustomDesignRequests** (Additional for use cases)
- designId: integer (PK, auto-increment)
- customerId: integer (FK to Customer)
- furnitureType: string
- dimensions: text
- materialPreference: string
- colorPreference: string
- specialRequirements: text
- referenceImages: JSON array
- budgetRange: string
- status: enum("submitted", "under_review", "quoted", "approved", "rejected")
- quoteAmount: decimal
- createdAt, updatedAt

---

## üé® Frontend
- Use **React + Vite + TypeScript** - **Fully TypeScript based**.
- Must use **Material UI (MUI)** as the primary UI library with **light green color theme** (#4CAF50, #81C784, #C8E6C9).
- Use **React Router** for navigation and **Redux Toolkit** for state management.
- Ensure all pages are **fully responsive** and **mobile-first** design.

### Customer Routes
- `/` - Homepage with featured products and hero section
- `/register` - Customer registration form
- `/login` - Customer login form
- `/products` - Product catalogue with filtering (Browse Products use case)
- `/products/:id` - Individual product detail page
- `/cart` - Shopping cart management (Add to Cart use case)
- `/checkout` - Order placement form (Place Order use case)
- `/orders` - Customer order history (View My Orders use case)
- `/orders/:id` - Individual order tracking details
- `/inquiry` - General inquiry form (Send Inquiry use case)
- `/custom-design` - Custom furniture request form (Custom Design use case)
- `/profile` - Customer profile management

### Admin Routes
- `/admin/login` - Admin authentication
- `/admin/dashboard` - Overview dashboard with key metrics
- `/admin/products` - Product management (CRUD operations)
- `/admin/inventory` - Inventory management and stock tracking
- `/admin/orders` - Order management and status updates
- `/admin/deliveries` - Delivery tracking and management
- `/admin/customers` - Customer management
- `/admin/inquiries` - Customer inquiry management
- `/admin/custom-designs` - Custom design request management
- `/admin/suppliers` - Supplier management

---

## ‚öô Core Use Cases Implementation

### 1. Browse Products
**Customer Flow:**
- View product catalogue with filters (category, price, material)
- Search products by name/description
- View detailed product information with image gallery
- Check product availability status

**Technical Implementation:**
- GET `/api/products` with query parameters for filtering
- GET `/api/products/:id` for detailed view
- Redux store for product state management
- Responsive product grid with MUI components

### 2. Add to Cart
**Customer Flow:**
- Select product and quantity
- Add custom notes for special requirements
- View cart summary with total calculation
- Manage cart items (update quantity, remove items)

**Technical Implementation:**
- POST `/api/cart/items` to add products
- PUT `/api/cart/items/:id` to update quantities
- DELETE `/api/cart/items/:id` to remove items
- Real-time cart total calculation

### 3. Place Order
**Customer Flow:**
- Review cart contents
- Provide shipping address and contact details
- Select payment method
- Confirm order placement
- Receive order confirmation

**Technical Implementation:**
- POST `/api/orders` to create new order
- Email confirmation via Nodemailer
- Order status initialization
- Cart clearing after successful order

### 4. View My Orders
**Customer Flow:**
- View list of all orders with status
- Click on specific order for detailed view
- Track delivery status and expected dates
- View order items and pricing

**Technical Implementation:**
- GET `/api/customers/:id/orders` for order history
- GET `/api/orders/:id` for detailed order view
- Real-time status updates
- Delivery tracking information

### 5. Send Inquiry
**Customer Flow:**
- Fill inquiry form with contact details
- Select inquiry type (general, product-specific, quote)
- Submit inquiry with optional product reference
- Receive confirmation of inquiry submission

**Technical Implementation:**
- POST `/api/inquiries` to submit inquiry
- Email notifications to admin
- Inquiry tracking and status management

### 6. Custom Design
**Customer Flow:**
- Complete custom design request form
- Upload reference images
- Specify dimensions, materials, and preferences
- Submit request for admin review
- Receive quote and approval status

**Technical Implementation:**
- POST `/api/custom-designs` with file upload
- Cloudinary integration for image storage
- Admin review and quoting system
- Status tracking and notifications

---

## üöÄ Admin Features

### Product Management
- **CRUD Operations** - Add, edit, delete products
- **Image Management** - Upload and manage product images
- **Inventory Tracking** - Real-time stock management
- **Category Management** - Organize products by type

### Order Management
- **Order Dashboard** - View all orders with filtering
- **Status Updates** - Update order progress
- **Delivery Coordination** - Manage shipping and delivery
- **Payment Tracking** - Monitor payment status

### Customer Management
- **Customer Database** - View customer information
- **Order History** - Access customer order patterns
- **Communication** - Respond to inquiries and requests

### Analytics & Reporting
- **Sales Overview** - Revenue and order statistics
- **Popular Products** - Best-selling items analysis
- **Inventory Reports** - Stock levels and reorder alerts
- **Customer Insights** - Registration and order trends

---

## üé® Design Requirements

### Material UI Theme (Light Green)
```typescript
const theme = createTheme({
  palette: {
    primary: {
      main: '#4CAF50',      // Main green
      light: '#81C784',     // Light green
      dark: '#388E3C',      // Dark green
    },
    secondary: {
      main: '#C8E6C9',      // Very light green
      contrastText: '#2E7D32',
    },
    background: {
      default: '#FAFAFA',
      paper: '#FFFFFF',
    }
  }
});
```

### Mobile-First Design
- **Touch-friendly buttons** - Minimum 44px touch targets
- **Responsive grid** - Product cards adapt to screen size
- **Swipe gestures** - Image galleries with touch support
- **Bottom navigation** - Easy thumb access on mobile
- **Fast loading** - Optimized images and lazy loading

### Professional Aesthetics
- **Clean typography** - Consistent font hierarchy
- **High-quality imagery** - Professional product photography
- **White space** - Uncluttered layout
- **Consistent spacing** - MUI spacing system
- **Accessible design** - WCAG 2.1 compliance

---

## ‚úÖ Technical Requirements

### Authentication & Security
- **JWT tokens** for customer and admin authentication
- **bcrypt** password hashing
- **Role-based access control** (customer vs admin routes)
- **Rate limiting** on API endpoints
- **Input validation** and sanitization

### Database & API
- **Sequelize migrations** for all table structures
- **Database seeders** for initial data
- **RESTful API design** with consistent response formats
- **Error handling** with proper HTTP status codes
- **API documentation** with Swagger/OpenAPI

### Performance & Optimization
- **Image optimization** through Cloudinary
- **Lazy loading** for product images
- **Caching strategies** for frequently accessed data
- **Minification** and bundling optimization
- **Mobile performance** optimized for South African networks

### Integration & Communication
- **Email notifications** via Nodemailer
- **File upload** handling for custom design images
- **Real-time updates** for order status changes
- **WhatsApp integration** for final order communication
- **Social media links** to Instagram (@theuncommonroom_za)

---

## üéØ Success Metrics
- **Time Savings** - Reduce admin workload by 10+ hours/week
- **Professional Appearance** - Modern, trustworthy web presence
- **Easy Product Discovery** - Intuitive filtering and search
- **Streamlined Orders** - Structured inquiry and order process
- **Mobile Optimization** - Excellent experience for Instagram users

The system must prioritize the **6 core use cases** while maintaining simplicity for the business owner to manage independently. All features should align with the goal of professionalizing the business while preserving the personal touch that makes The Uncommon Room unique.